{smcl}
{* 17mar2005}{...}
{hline}
help for {hi:estoutdef}{right:(SJ5-3: st0085)}
{hline}

{title:Utility to view and edit estout's defaults files}


{p 8 15 2}
{cmdab:estoutdef} {it:style} [ {cmd:,}
  { {cmdab:v:iew} | {cmdab:e:dit} | {cmdab:star:bang} } ]


    where {it:style} is {cmd:tab} | {cmd:tex} | {cmd:html} | {it:mystyle}


{title:Description}

{p 4 4 2} {cmd:estoutdef} is a small utility to view and edit {help estout}'s
defaults. The defaults file associated with {it:style} will optionally be
typed to the Results window, viewed in the Viewer, or opened in the Do-File
Editor.


{title:Options}

{p 4 8 2}
{cmd:view} specifies that the defaults file be displayed in the Viewer. The default is
to type the file to the Results window.

{p 4 8 2}
{cmd:edit} specifies that the defaults file be opened in the Do-file Editor.

{p 4 8 2}
{cmd:starbang} specifies that only the lines beginning with the characters
"*!" be typed. Such comment lines are used to indicate the version number of the
defaults file.


{title:Remarks}

{p 4 4 2}{it:Generating new defaults files}

{p 4 4 2}
It is very easy to generate one's own set of default options. Type

        {cmd:. estoutdef} {it:style}{cmd:, edit}

{p 4 4 2}
to open one of the existing defaults files (where {it:style} is the name of
the defaults set, e.g., {cmd:tab}), make the desired modifications and save
the file as {cmd:estout_}{it:newstyle}{cmd:.def} in the current directory or elsewhere
in the ado path (see help {help sysdir}). To use the new options set, type:

        {cmd:. estout} {it:...} {cmd:, style(}{it:newstyle}{cmd:)}


{p 4 4 2}{it:Defaults files syntax}

{p 4 4 2}
{cmd:estout} has two main types of options, which are treated differentially
in defaults files. On the one hand, there are simple on/off options without
arguments, like {cmd:legend} or {cmd:showtabs}. To turn such an option on,
enter the option followed by the options name as an argument, i.e., add the line

        {it:option} {it:option}

{p 4 4 2}
to the defaults file. For example,

        {cmd:legend legend}

{p 4 4 2}
specifies that a legend be printed in the table footer. Otherwise, if you want
to turn the option of, just delete or comment out the line that contains it (or
specify {it:option} without an argument).

{p 4 4 2}
To temporarily turn off an option that has been activated in a defaults file,
specify {cmd:no}{it:option} in the command line (do not, however, use
{cmd:no}{it:option} in defaults files). For example, if the legend has been
turned on in the defaults file, but you want to suppress it in a specific call of
{cmd:estout}, type

        {cmd:. estout} {it:...}{cmd:, nolegend}

{p 4 4 2}
On the other hand, there are options that take arguments, such as
{cmd:prehead(}{it:args}{cmd:)}, {cmd:delimiter(}{it:args}{cmd:)}, or
{cmd:stats(}{it:args}{cmd:,} {it:...}{cmd:)}. Such options are specified as

        {it:option} {it:args}

{p 4 4 2}
in the defaults file (where {it:args} must not include suboptions; see
below). Specifying an option in the command line overwrites the settings from
the defaults file. However, note that a {cmd:no} form, which exists for the
first options type, is not available here.

{p 4 4 2}
Last but not least, there are two options that reflect a combination of the first
and second types: {cmd:eform}[{cmd:(}{it:args}{cmd:)}] and
{cmd:margin}[{cmd:(}{it:args}{cmd:)}]. These options can be specified
as either

        {it:option} {it:option}

{p 4 4 2}
or

        {it:option} {it:args}

{p 4 4 2}
in the defaults file; the {cmd:no} form is allowed.

{p 4 4 2}
Many {cmd:estout} options have suboptions, i.e., an option might take the
form {it:option}{cmd:(}{it:...}{cmd:,} {it:suboption}{cmd:)} or
{it:option}{cmd:(}{it:...}{cmd:,} {it:suboption}{cmd:(}{it:args}{cmd:))}. In
the defaults file, the suboptions cannot be included in the
definition of a higher-level option. Instead, they must be
specified in their own lines, as either

        {it:optionsuboption} {it:suboption}

{p 4 4 2}
or

        {it:optionsuboption} {it:args}

{p 4 4 2}
In the case of a two-level nesting of options, the name
used to refer to the suboption is a concatenation of the option's name and the
suboption's name,
i.e., {cmd:"}{it:optionsuboption}{cmd:"="}{it:option}{cmd:"+"}{it:suboption}{cmd:"}. For
example, the {cmd:labels()} suboption of the {cmd:stats()} option would be
set by the term {cmd:statslabels}. Analogously, the three level nesting in
the {cmd:stats()} option yields suboption names composed of three names. For
instance, the suboption called by the command

        {cmd:. estout} {it:...}{cmd:, stats(}{it:...}{cmd:, labels(}{it:...}{cmd:, prefix(}{it:args}{cmd:)))}

{p 4 4 2}
would be referred to as

        {cmd:statslabelsprefix} {it:args}

{p 4 4 2}
in the defaults file. The {cmd:cells()} option represents an exception to
this rule. It may be defined in the defaults file using
only a plain array of cells elements without suboptions, e.g.

        {cmd:cells "b se" p}

{p 4 4 2}
However, the suboptions of the cells elements may be referred to as
{it:el_suboption}, for example

        {cmd:b_star star}

{p 4 4 2}
or

        {cmd:se_par [ ]}


{p 4 4 2}
{it:Comments in defaults files}

{p 4 4 2}
Be aware that the support for comments in defaults files is limited. In
particular, the {cmd:/*} and {cmd:*/} comment indicators cannot be used.
The other comment indicators work (more or less) as usual, that is:

{p 8 10 2}
- Empty lines and lines beginning with {cmd:*} (with or without preceding
blanks) will be ignored.

{p 8 10 2}
- {cmd://} preceded by one or more blanks indicates that the rest of the
line should be ignored. Lines beginning with {cmd://} (with or without preceding
blanks) will be ignored.

{p 8 10 2}
- {cmd:///} preceded by one or more blanks indicates that the rest of the
line should be ignored and the part of the line preceding it should be added to
the next line. In other words, {cmd:///} can be used to split commands into
two or more lines of code.


{title:Saved results}

{p 4 17 2}{cmd:r(fn)}{space 8}fully qualified name of the defaults file


{title:Author}

    Ben Jann, ETH Zurich, jann@soz.gess.ethz.ch


{title:Also see}

{p 4 13 2}Online:  help for {help estout}; {help file}
